package financial_unit;

import bank_product.Account;
import bank_product.BankProduct;
import bank_product.Credit;
import java.util.ArrayList;
import bank_product.Deposit;
import java.util.List;
import java.util.Scanner;

import tools.Entity;
import tools.InvalidAvailableCurrencyException;
import tools.InvalidIdOrBulstatException;
import tools.OutOfAgeException;

public class Client extends FinancialUnit {

	//available currency for client
	private static final int MIN_AVAILABLE_CURRENCY=0;
	private static final int MAX_AVAILABLE_CURRENCY=100000;
	private static final int ID_NUMBERS = 10;
	private static final int BULSTAT_NUMBER_NINE = 9;
	private static final int BULSTAT_NUMBER_THIRTEEN = 13;
	//fields
    private int monthlySalary;
    private Entity entity;
    private String idOrBulstat;
    private List<Account> bankAccounts=new ArrayList<Account>();
    


	public Client(String name, String address, int availableCurrency,Entity entity,String idOrBulstat,int monthlySalary) {
		super(name, address, availableCurrency);
		try {
			this.entity=entity;
			setIdOrBulstat(idOrBulstat);
			
		} catch (InvalidIdOrBulstatException e) {
			e.getMessage();
		}
	}


   




    public int getMonthlySalary() {
        return monthlySalary;
    }

    
    public void setMonthlySalary(int monthlySalary) {
    	Scanner sc=new Scanner(System.in);
    	while(monthlySalary<0) {
    		System.out.println("Invalid salary entered.Try again: ");
    		sc.nextLine();
    	}
        this.monthlySalary = monthlySalary;
    }

    public String getIdOrBulstat() {
        return idOrBulstat;
    }

    private void setIdOrBulstat(String idOrBulstat) throws InvalidIdOrBulstatException {
    	Scanner sc=new Scanner(System.in);
    	 if(idOrBulstat.length()!=ID_NUMBERS
    			 &&idOrBulstat.length()!=BULSTAT_NUMBER_NINE
    			 &&idOrBulstat.length()!=BULSTAT_NUMBER_THIRTEEN) {
			throw new InvalidIdOrBulstatException();
		}
    	 else {
			if (idOrBulstat.length()==ID_NUMBERS&&this.getEntity()==Entity.CORPORATE) {
				throw new InvalidIdOrBulstatException();
			}
			else if (idOrBulstat.length()==BULSTAT_NUMBER_NINE&&this.getEntity()==Entity.PHYSICAL
					||idOrBulstat.length()==BULSTAT_NUMBER_THIRTEEN&&this.getEntity()==Entity.PHYSICAL) {
				throw new InvalidIdOrBulstatException();
			}else {
				this.idOrBulstat=idOrBulstat;
			}
		}
    }

   




	public Entity getEntity() {
		return entity;
	}


	@Override
	public void setName(String name) {
		boolean containDigit=true;
		   Scanner sc=new Scanner(System.in);
		   
			while(containDigit||name.isEmpty()||name==null||name.length()<getMinSizeOfName()) {
				containDigit=false;
			 for (Character ch : name.toCharArray()) {
				 if (ch==' ') {
					continue;
				}
				if (!Character.isAlphabetic(ch)) {
					containDigit=true;
					break;
				}
			 }
			    if (containDigit||name.isEmpty()||name==null||name.length()<getMinSizeOfName()) {
			    	System.out.println("Invalid name entered.Try again:");
			    	name=sc.nextLine();
			    	containDigit=true;
				}
			}
			sc.close();
		super.setCorrectName(name);
	}

	@Override
	 public void setAvailableCurrency(int availableCurrency) throws InvalidAvailableCurrencyException {
		if(availableCurrency<MIN_AVAILABLE_CURRENCY||availableCurrency>MAX_AVAILABLE_CURRENCY) {
			throw new InvalidAvailableCurrencyException("Available currency for client should be between: "+MIN_AVAILABLE_CURRENCY+" and "+MAX_AVAILABLE_CURRENCY);
		}
		setCorrectAvailableCurrency(availableCurrency);
	}

	public List<Account> getBankAccountsList() {
		return bankAccounts;
	}





	


}