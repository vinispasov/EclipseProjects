package financial_unit;

import bank_product.Account;
import bank_product.BankProduct;
import bank_product.Credit;
import java.util.ArrayList;
import bank_product.Deposit;
import java.util.List;
import java.util.Scanner;

import tools.Entity;

public class Client extends FinancialUnit {

	//available currency for client
	private static final int MIN_AVAILABLE_CURRENCY=0;
	private static final int MAX_AVAILABLE_CURRENCY=100000;
	private static final int ID_NUMBERS = 10;
	private static final int BULSTAT_NUMBER_NINE = 9;
	private static final int BULSTAT_NUMBER_THIRTEEN = 13;
	//fields
    private int monthlySalary;
    private Entity entity;
    private String idOrBulstat;
    private List<Account> bankAccounts=new ArrayList<Account>();
    


	public Client(String name, String address, int availableCurrency,String idOrBulstat,int monthlySalary,Entity entity) {
		super(name, address, availableCurrency);
		setIdOrBulstat(idOrBulstat);
	}


   




    public int getMonthlySalary() {
        return monthlySalary;
    }

    // Monthly salary must be of only numeric characters.
    public void setMonthlySalary(int monthlySalary) {
        this.monthlySalary = monthlySalary;
    }

    public String getIdOrBulstat() {
        return idOrBulstat;
    }

    private void setIdOrBulstat(String idOrBulstat) {
    	Scanner sc=new Scanner(System.in);
    	 while(idOrBulstat.length()!=ID_NUMBERS
    			 &&idOrBulstat.length()!=ID_NUMBERS
    			 &&idOrBulstat.length()!=ID_NUMBERS) {
			
			System.out.println("Incorrect id or bulstat entered.Try again: ");
			idOrBulstat=sc.nextLine();
		}
    }

    // the client initiates the transaction.
    public void requestCredit() {

    }

    public void payCredit() {

    }

    public void giveDeposit() {

    }




	public Entity getEntity() {
		return entity;
	}


	@Override
	public void setName(String name) {
		boolean containDigit=true;
		   Scanner sc=new Scanner(System.in);
		   
			while(containDigit||name.isEmpty()||name==null||name.length()<getMinSizeOfName()) {
				containDigit=false;
			 for (Character ch : name.toCharArray()) {
				 if (ch==' ') {
					continue;
				}
				if (!Character.isAlphabetic(ch)) {
					containDigit=true;
					break;
				}
			 }
			    if (containDigit||name.isEmpty()||name==null||name.length()<getMinSizeOfName()) {
			    	System.out.println("Invalid name entered.Try again:");
			    	name=sc.nextLine();
				}
			}
			sc.close();
		super.setCorrectName(name);
	}

	@Override
	 public void setAvailableCurrency(int availableCurrency) {
		Scanner sc=new Scanner(System.in);
		while (availableCurrency<MIN_AVAILABLE_CURRENCY||availableCurrency>MAX_AVAILABLE_CURRENCY) {
			System.out.println("Available currency for client should be between: "+MIN_AVAILABLE_CURRENCY+" and "+MAX_AVAILABLE_CURRENCY);
			availableCurrency=sc.nextInt();
		}
		sc.close();
		setCorrectAvailableCurrency(availableCurrency);
	}

	public List<Account> getBankAccountsList() {
		return bankAccounts;
	}








}