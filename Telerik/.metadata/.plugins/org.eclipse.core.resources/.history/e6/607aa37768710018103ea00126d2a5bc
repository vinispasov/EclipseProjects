package RecursionTasks;
import java.util.Scanner;
import java.util.ArrayList;
public class Permutations {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		
		int n=sc.nextInt();
		int counter=0;
		int[]arr=new int[n];
		
		ArrayList<Integer>list=new ArrayList();
		
		
		list=findPermutations(n,counter,list,arr);
		for (int i = 0; i < list.size(); i++) {
			System.out.println(list.get(i));
		}
		
	}
	static ArrayList<Integer> findPermutations(int n,int counter,ArrayList<Integer>list,int[]arr){
		StringBuilder sb=new StringBuilder();
		if (counter==arr.length-1) {
			return list;
		}
		if (counter==0) {
			for (int i = 0; i < arr.length; i++) {
				arr[i]=i+1;
				sb.append(arr[i]);
			}
			list.add(Integer.parseInt(sb.substring(0)));
			sb.delete(0, sb.charAt(sb.length()-1));
		}
		counter++;
		if (counter==1) {
			for (int i = 0; i < arr.length-2; i++) {
				int a=arr[i+2];
				arr[i+2]=arr[i+1];
				arr[i+1]=a;
				for (int j = 0; j < arr.length; j++) {
					sb.append(arr[j]);
				}
				list.add(Integer.parseInt(sb.substring(0)));
				sb.delete(0, sb.charAt(sb.length()-1));
			}
			for (int i = 0; i < arr.length; i++) {
				arr[i]=i+1;
			}
		}
		
		for (int i = 0; i < arr.length-1; i++) {
			int a=arr[i+1];
			arr[i+1]=arr[i];
			arr[i]=a;
			for (int j = 0; j < arr.length; j++) {
				sb.append(arr[j]);
			}
			list.add(Integer.parseInt(sb.substring(0)));
			sb.delete(0, sb.charAt(sb.length()-1));
		}
	     return findPermutations(n,counter,list,arr);
		
	}
	
	
	
	


}
