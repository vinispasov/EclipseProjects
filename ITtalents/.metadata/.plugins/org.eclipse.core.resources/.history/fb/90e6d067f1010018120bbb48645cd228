
public class Employee {
	private String name;
	private Task currentTask;
	private int maxHours=8;
	private int hoursLeft=maxHours;
	private static AllWork allWork;
	private static int i=0;
	//constructor
	Employee(String name){
		setName(name);
		setAllWork(allWork);
	}
	
	//setters
	public void setAllWork(AllWork allWork) {
		this.allWork=allWork;
	}
	public void setName(String name) {
		if (name!=" ") {
			this.name=name;
		}
		else {
			System.out.println("The name is incorrect!");
		}
	}
	public void setCurrentTask(Task currentTask) {
	     this.currentTask=currentTask;
	}
	public void setHoursLeft(int hoursLeft) {
		if (hoursLeft>=0) {
			this.hoursLeft=hoursLeft;
		}
		else {
			System.out.println("Incorrect number for hours left!");
		}	
	}
	
	//getters
	public AllWork getAllWork() {
		return this.allWork;
	}
	public String getName() {
		return this.name;
	}
	public Task getCurrentTask() {
		return this.currentTask;
	}
	public int getHoursLeft() {
		return this.hoursLeft;
	}
	
	//methods
	
	public void work(Employee rabotnik) {
		if (i==allWork.task.length-1) {
			i=0;
		}
		
			if (this.hoursLeft>allWork.getNextTask(rabotnik).getWorkingHours()) {
				System.out.println(this.hoursLeft-=allWork.getNextTask(rabotnik).getWorkingHours());
				allWork.getNextTask(rabotnik).setWorkingHours(0);
				
			}
			else if (allWork.getNextTask(rabotnik).getWorkingHours()>hoursLeft) {
				allWork.getNextTask(rabotnik).setWorkingHours(allWork.getNextTask(rabotnik).getWorkingHours()-hoursLeft);
				this.setHoursLeft(0);
			}
			else {
				setHoursLeft(0);
				allWork.getNextTask(rabotnik).setWorkingHours(0);
			}
		
			
		
	}
	
	public void showReport() {
		System.out.println();
		System.out.println("Name of employee: "+getName());
		System.out.println("Current task name: "+ this.currentTask.getName());
		System.out.println("Hours left to work: "+getHoursLeft());
		System.out.println("Hours left for the task: "+this.currentTask.getWorkingHours());
	}
	
	void startWorkingDay() {
		this.hoursLeft=this.maxHours;
	}
	

	
}
